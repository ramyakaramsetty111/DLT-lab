{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":3292,"status":"ok","timestamp":1698944576657,"user":{"displayName":"Lakshmi Ramya karamsetty","userId":"14667509456949959056"},"user_tz":-330},"id":"bnMg4zkV_FMf"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow.keras import datasets,layers,models\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16001,"status":"ok","timestamp":1698944592646,"user":{"displayName":"Lakshmi Ramya karamsetty","userId":"14667509456949959056"},"user_tz":-330},"id":"iCVQ7v1g_MYU","outputId":"f90aae7b-3119-486c-8864-705a9ecfd7cf"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n","170498071/170498071 [==============================] - 11s 0us/step\n"]}],"source":["(x_train,y_train),(x_test,y_test)=datasets.cifar10.load_data()"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":24,"status":"ok","timestamp":1698944592646,"user":{"displayName":"Lakshmi Ramya karamsetty","userId":"14667509456949959056"},"user_tz":-330},"id":"42GiBAPe_P6B","outputId":"cb65201a-883e-4e0c-ff9e-d615c6debd81"},"outputs":[{"data":{"text/plain":["(50000, 32, 32, 3)"]},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":["x_train.shape"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1698944602475,"user":{"displayName":"Lakshmi Ramya karamsetty","userId":"14667509456949959056"},"user_tz":-330},"id":"2YOmBCxZ_T26","outputId":"aaff5963-1b18-424b-ce9e-958f8b9a8409"},"outputs":[{"data":{"text/plain":["(10000, 32, 32, 3)"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["x_test.shape"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1698944612544,"user":{"displayName":"Lakshmi Ramya karamsetty","userId":"14667509456949959056"},"user_tz":-330},"id":"4zzao1vW_WeU","outputId":"a464af1e-62b4-49dd-98af-3b4b0b6fbd0d"},"outputs":[{"data":{"text/plain":["(50000, 1)"]},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":["y_train.shape"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1698944625909,"user":{"displayName":"Lakshmi Ramya karamsetty","userId":"14667509456949959056"},"user_tz":-330},"id":"BcJPssdq_Zcv","outputId":"4c1dfbb5-327d-41db-acac-a7608bf46270"},"outputs":[{"data":{"text/plain":["array([[6],\n","       [9],\n","       [9],\n","       [4],\n","       [1],\n","       [1],\n","       [2],\n","       [7],\n","       [8],\n","       [3],\n","       [4],\n","       [7],\n","       [7],\n","       [2],\n","       [9],\n","       [9],\n","       [9],\n","       [3],\n","       [2],\n","       [6],\n","       [4],\n","       [3],\n","       [6],\n","       [6],\n","       [2],\n","       [6],\n","       [3],\n","       [5],\n","       [4],\n","       [0],\n","       [0],\n","       [9],\n","       [1],\n","       [3],\n","       [4],\n","       [0],\n","       [3],\n","       [7],\n","       [3],\n","       [3],\n","       [5],\n","       [2],\n","       [2],\n","       [7],\n","       [1],\n","       [1],\n","       [1],\n","       [2],\n","       [2],\n","       [0]], dtype=uint8)"]},"execution_count":6,"metadata":{},"output_type":"execute_result"}],"source":["y_train[:50]"]},{"cell_type":"code","execution_count":7,"metadata":{"executionInfo":{"elapsed":956,"status":"ok","timestamp":1698944639672,"user":{"displayName":"Lakshmi Ramya karamsetty","userId":"14667509456949959056"},"user_tz":-330},"id":"XBw5-IEj_c5o"},"outputs":[],"source":["classes=['aeroplane','automobiles','bird','cat','deer','dog','frog','horse','ship','truck']\n","def plot_sample(x,y,index):\n","  plt.figure(figsize=(15,2.5))\n","  plt.imshow(x[index])\n","  plt.xlabel(classes[y[index]])\n"]},{"cell_type":"code","execution_count":8,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1698944654391,"user":{"displayName":"Lakshmi Ramya karamsetty","userId":"14667509456949959056"},"user_tz":-330},"id":"Bc8VdNgv_grR"},"outputs":[],"source":["y_train=y_train.reshape(-1,)\n","y_test=y_test.reshape(-1,)"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":275},"executionInfo":{"elapsed":1138,"status":"ok","timestamp":1698944666825,"user":{"displayName":"Lakshmi Ramya karamsetty","userId":"14667509456949959056"},"user_tz":-330},"id":"HfRhZUtA_ji3","outputId":"ffb9c166-4bac-46ac-91f5-c2f4934f267e"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 1500x250 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["plot_sample(x_train,y_train,9)"]},{"cell_type":"code","execution_count":10,"metadata":{"executionInfo":{"elapsed":4,"status":"ok","timestamp":1698944681377,"user":{"displayName":"Lakshmi Ramya karamsetty","userId":"14667509456949959056"},"user_tz":-330},"id":"Q7Bdnm-U_nIT"},"outputs":[],"source":["x_test=x_test/255.0"]},{"cell_type":"code","execution_count":11,"metadata":{"executionInfo":{"elapsed":1203,"status":"ok","timestamp":1698944693091,"user":{"displayName":"Lakshmi Ramya karamsetty","userId":"14667509456949959056"},"user_tz":-330},"id":"JAKqnomB_p0t"},"outputs":[],"source":["from keras.api._v2.keras import activations\n","ANN=models.Sequential([layers.Flatten(input_shape=(32,32,3)),\n","                       layers.Dense(3000,activation='relu'),\n","                       layers.Dense(1000,activation='relu'),\n","                       layers.Dense(10,activation='softmax')])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"SNTLbqsS_tFF"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/5\n","1563/1563 [==============================] - 146s 93ms/step - loss: nan - accuracy: 0.1000\n","Epoch 2/5\n","1563/1563 [==============================] - 141s 90ms/step - loss: nan - accuracy: 0.1000\n","Epoch 3/5\n","1563/1563 [==============================] - 137s 88ms/step - loss: nan - accuracy: 0.1000\n","Epoch 4/5\n","1563/1563 [==============================] - 134s 86ms/step - loss: nan - accuracy: 0.1000\n","Epoch 5/5\n","1563/1563 [==============================] - 134s 86ms/step - loss: nan - accuracy: 0.1000\n"]},{"data":{"text/plain":["\u003ckeras.src.callbacks.History at 0x7edc017b3ca0\u003e"]},"execution_count":12,"metadata":{},"output_type":"execute_result"}],"source":["ANN.compile(optimizer='sgd',loss='sparse_categorical_crossentropy',metrics=['accuracy'])\n","ANN.fit(x_train,y_train,epochs=5)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"Jch7wwVT_wIZ"},"outputs":[{"name":"stdout","output_type":"stream","text":["313/313 [==============================] - 8s 27ms/step\n","classification report               precision    recall  f1-score   support\n","\n","           0       0.10      1.00      0.18      1000\n","           1       0.00      0.00      0.00      1000\n","           2       0.00      0.00      0.00      1000\n","           3       0.00      0.00      0.00      1000\n","           4       0.00      0.00      0.00      1000\n","           5       0.00      0.00      0.00      1000\n","           6       0.00      0.00      0.00      1000\n","           7       0.00      0.00      0.00      1000\n","           8       0.00      0.00      0.00      1000\n","           9       0.00      0.00      0.00      1000\n","\n","    accuracy                           0.10     10000\n","   macro avg       0.01      0.10      0.02     10000\n","weighted avg       0.01      0.10      0.02     10000\n","\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}],"source":["from sklearn.metrics import confusion_matrix,classification_report\n","y_predict=ANN.predict(x_test)\n","y_predict_classes=[np.argmax(element) for element in y_predict]\n","print('classification report',classification_report(y_test,y_predict_classes))"]}],"metadata":{"colab":{"authorship_tag":"ABX9TyOYaFU+/bRLbOSVT4vxVY7n","name":"","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}